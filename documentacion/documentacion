Redux

Redux = Es un contenedor del estado predecible para nuestras aplicaciones.
Redux: es una librería creada por @dan_abramov, para manipular los datos de una forma separada de la interfaz, similar 
a lo que hace webpack con la opción hot-reload

Es un contenedor del estado predecible para aplicaciones de JavaScript de front-end complejas.

Componentes en Redux:

Store: Es el centro y la verdad de todo, con métodos para actualizar, obtener y escuchar datos.
Actions: Son bloques de información que envian datos desde la aplicación hacia el store.
Reducers: Cambian el estado de la aplicación.

-------------------------------------------------------------------------------------------------------------------------------------

Principios a tener presentes al trabajar con Redux

Tres principios de Redux:
    Única fuente de la verdad.
    El estado es de solo lectura.
    Los cambios se realizan con funciones puras. Una función que sea fácil de leer.


1. Única fuente de verdad:
El estado de toda tu aplicación esta almacenado en un árbol guardado en un único store lo que hace mas fácil el proceso de depuración.

2. Solo Lectura:
La única forma de modificar el estado es emitiendo una acción, un objeto que describe que ocurrió.

3. Los cambios se realizan con funciones puras:
Los reduces son funciones puras que toman el estado anterior y una acción, y devuelven un nuevo estado

Básicamente el ciclo de Redux sería algo como:

Tienes tu vista (UI)
Tu vista va a enviar una acción
Tu acción va a llamar un reducer
Tu reducer va a llamar a tu store
Tu store va a actualizar el estado
El estado va a actualizar tu vista (interfaz/UI)

Redux debe utilizarse de una manera responsable, para no caer en el error de aplicar sobre ingeniería (exceso de complejidad) 
a tus aplicaciones sencillas … eso sería contraproducente a lo que intenta resolver Redux.

------------------------------------------------------------------------------------------------------------------------------------

Entendiendo y agregando un Store

Store = Es la parte más importante de entender cuando estamos haciendo algo en Redux.

Datos importantes del Store:

* Contiene el estado de la aplicación.
* Se puede acceder al estado con el método getState()
* Se puede actualizar el estado con el método dispatch(action)
* Escucha cambios con el método **subscribe(listener)
* Deja de escuchar cambios retornando la función del método subscribe(listener)


El storage se importa de la siguiente forma:

import { createStorage } from'redux'

Reducer => Función pura que retorna el próximo estado.
PreloadState / InitialState => Es el estado inicial de la aplicación, la primera carga, el llamado a una data. Puede ser cualquier tipo de dato.
Enhancer => Función que puede extender redux con capacidades añadidas por librerías externas. Es opcional. Eg. Añadir las dev-tools

Además, debemos crear una constante que será la que utilicemos en la aplicación.

const store = createStore(
  reducer,
  initialState,
  enhancer
)

---------------------------------------------------------------------------------------------------------------------------------

Definiendo acciones a manejar

Action = Bloque de información que envía datos a la aplicación.
Datos importantes:

*Se envían usando el método dispatch() del store.
*Son la única fuente de información del store.
*Son objetos planos de JavaScript.

---------------------------------------------------------------------------------------------------------------------------------

Actualizando el Store con Reducers

Reducer = Modifica el estado.

Datos importantes:

* Es una función pura.
* Puede haber más de un reducer en una aplicación pero solo debe haber un store.
* Devuelve el siguiente estado.

¿Qué es una función pura?
“Dados los mismos parámetros/argumentos/entradas deben retornar el mismo resultado, sin importar el número de veces que se llame”


Que no deben hacer

* Modificar los argumentos recibidos
* Llamar a APIs (u otras tareas secundarias)
* Llamar a funciones no puras como Date.now(), Math.random()

<h1>Funciones puras</h1>

Es un concepto de programación funcional, hace que el código sea más legible. Tienen las siguientes condiciones:
Dados los mismos datos de entrada, deben retornar el mismo resultado sin importar el número de veces que se llame.
No debe tener objetos secundarios.
El reducer se iguala a una función, esta función recibe dos parámetros que son el state y la action y en la función se debe definir que se hace con state y action; generalmente se valida con un switch.

----------------------------------------------------------------------------------------------------------------------------------------

Resumen del flujo de eventos

* Se establece un State (estado) inicial con el que se crea originalmente el store mediante el método createStore de redux
* el state inicial define los contenidos que se muestran en la UI mediante store.getState() y la función render()
* mediante los elementos de la UI se dispara un evento que se captura mediante un listener (como onsubmit) y que invoca al store.dispatch() con una acción específica …
* el Reducer recibe la acción(type y payload) enviada mediante el store.dispatch() y genera un nuevo estado que remplazará al estado inicial (o anterior)
* el cambio del estado es detectado por el store y se ejecuta store.subscribe(handle) … con la función (handle) que manejará lo que sucede cuando ha cambiado el estado
* en la función (handle) recibida por store.subscribe(handle) se invoca la actualización de la UI a partir del nuevo estado creado
* queda establecido el nuevo estado(state) y queda de nuevo atento el evento (listener) en la UI

----------------------------------------------------------------------------------------------------------------------------------------

Instalando React-redux

github.com/reactjs/react-redux

Vamos a la terminal y ponemos el siguiente comando:
npm install --save react-redux
Una vez que termine el proceso verás en el archivo package.json la dependencia instalada.
Por último corre el proyecto utilizando el siguiente comando:
npm run build:dev

----------------------------------------------------------------------------------------------------------------------------------------

Puliendo la estructura de datos de Platzi Video

Debemos asegurar que los datos estén bien estructurados
Nuestra data viene de la siguiente forma:
Categorias tienen playlist.
Playlist tienen medias.

---------------------------------------------------------------------------------------------------------------------------------------
Integrando el Store con Provider....

Utilizaremos un Provider que nos provee React Redux para asignar todos los datos a la aplicación.
Un Provider es un componente de orden superior que sirve para heredar elementos a los componentes hijos.

---------------------------------------------------------------------------------------------------------------------------------------

Conectando datos a los componentes

Conectaremos datos en específico dentro de nuestros componentes.
Primero obtendremos exclusivamente los datos que utiliza el componente.

Utilizaremos lo siguiente:
connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options]

[mapStateToProps(state, [ownProps]): stateProps] Es una función en la que si el argumento está especificado el nuevo componente se 
suscribe para recibir actualizaciones, lo que significa que cada vez que el store es actualizado la función mapStateToProps será 
llamada para obtener las propiedades.


---------------------------------------------------------------------------------------------------------------------------------------

Agregando un Reducer para manejar los datos

Hagamos la lógica de actualización de datos:
Utilizaremos un reducer el cual manejará los datos de la aplicación.

Crearemos una nueva carpeta llamada reducers y dentro haremos un archivo llamado data.js

En ese archivo colocaremos una función que resuelva que dependiendo el tipo de acción que se reciba se ejecutará algo específico.

Importaremos el archivo a nuestro archivo home.js - entries

----------------------------------------------------------------------------------------------------------------------------------------

Manejando una acción para búsqueda de videos

* Hagamos funcionar nuestra aplicación enviándole acciones para cambiar el estado.

* Utilizaremos un formulario de búsqueda para encontrar un video.

* Utilizaremos dispatch para enviar la acción


---------------------------------------------------------------------------------------------------------------------------------------
