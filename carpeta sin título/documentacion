Ciclo de vida de los componentes

classMiComponenteextendsComponents{

	constructor(){
	// Enlazo (bind) eventos y/o inicializo estado
	}
	componentWillMount(){
	// Se ejecuta antes de montar el componente
	// Se podría usar para hacer un setState()
	}
	render(){
	// Contiene todos los elementos a renderizar
	// podrías usarlo para calcular propiedades (ej: concatenar una cadena)
	}
	componentDidMount(){
	//Solo se lanza una vez
	//Ideal para llamar a una API, hacer un setInteval, etc
	}

	//Actualización:
	componentWillReceiveProps(){
	//Es llamado cuando el componente recibe nuevas propiedades.

	}
	shouldComponentUpdate(){
	//Idea para poner una condición y  si las propiedades que le llegaron anteriormente
	// eran las mismas que tenia retornar false para evitar re-renderear el componente
	}
	componentWillUpdate(){
	//metodo llamado antes de re-renderizar el componente si shouldComponentUpdate devolvió true
	}

	// re-render si es necesario...

	componentDidUpdate(){
	//Método llamado luego del re-render
	}
	componentWillUnmount(){
	//Método llamado antes de desmontar el componente
	}
	componentDidCatch(){
	// Si ocurre algún error, lo capturo desde acá:
	}

}

------------
Los componentes tienen un ciclo de vida, el ciclo:

Montado

Actualización

Desmontado,

Manejo de errores (desde React 2016)

MONTADO

constructor(){
	 // Método llamado antes de que el componente sea montado (el componente aún no se ve)
	 // Podemos iniciar el estado
	 // Enlazar bind de eventos
	 // Es el primer método que se llama al instanciar un componente.
	}
componentWillMount(){
	// Se ejecuta antes de montar el componente
	// Se podría usar para hacer un setState()
	// No hagas llamados a un API o suscripción de eventos
	// Método llamado inmediatamente antes de que el componente se vaya montar, (el componente aún no se ve)
	}
render(){
	// Contiene todos los elementos a renderizar
	// podrías usarlo para calcular propiedades (ej: concatenar una cadena)
	// Contiene todos los elementso a renderizar (estructura del componente)
	}
componentDidMount(){
	// Solo se lanza una vez
	// Enlazar (bind) de eventos
	// Ideal para llamar a una API, hacer un setInterval, etc
	// Es el primer método que se llama al instanciar un componente.
	// Método llamado luego de montarse el componente (el compenente ya está en pantalla)
	}
ACTUALIZACIÓN

componentWillReceiveProps(){
	//Es llamado cuando el componente recibe nuevas propiedades.
	// Sirve para actualizar el estado con base a las nuevas propiedades
	}
shouldComponentUpdate(){
	//Idea para poner una condición y  si las propiedades que le llegaron anteriormente
	// eran las mismas que tenia retornar false para evitar re-renderear el componente
	}
componentWillUpdate(){
	//metodo llamado antes de re-renderizar el componente si shouldComponentUpdate devolvió true
	}
componentDidUpdate(){
	//Método llamado luego del re-render
	}
DESMONTADO

componentWillUnmount(){
	//Método llamado antes de desmontar el componente
	}
MANEJO DE ERRORES

componentDidCatch(){
	// Si ocurre algún error, lo capturo desde acá:
	// Si ocurre algún error al renderizar el componente este método es invocado
	// El manejo de errores solo ocurre en compoenetes hijos.
	}

-----------------------------------------------------------------------------------

---Componentes puros y funcionales en ReactJS---

PureComponent: tiene el método shouldComponentUpdate ya asignado (por defecto), si a este componente no se le actualizan las propiedades, no tenemos que validar a mano con shouldComponentUpdate, PureComponent lo hace por nosotros, es decir; si recibe nuevas propiedades pero son las que ya teniamos, no se re-renderiza.

importReact, { PureComponent } from 'react';

classPlaylistextendsPureComponent{
  render() {
    <Componente />
    }
}
Componente Funcional: Es una función la cual solo retorna el JSX de nuestro componente (renderiza UI), es mas sencillo, mas fácil de probar y este componente no tiene ciclo de vida.

import React from'react';

functionPlaylist(props) {
  return<Componentetitle={props.title} />
}


--------------------------------------------------------------------------------------------------------

Smart Components & Dumb Components

Presentacional Cómo se ve

Puede contener smart components u otros componentes de UI
Permiten composición con `[props.children]``
No depeden del resto de la aplicación
No especifica cómo los datos son cargados o mutados
Recibe datos y callbacks solo con propiedades
Rara vez tienen su propio estado
Están escritos como componentes funcionales a menos que necesiten mejoras de performance. Sólo pueden ser Componentes funcionales o Pure Components
Containers Qué hace

Concetrado en el funcionamiento de la aplicación
Contienen componentes de UI u otros containers
No tienen estilos
Proveen de datos a componentes de UI u otros contenedores
Proveen de callbacks a la UI
Normalmente tienen estado
Llaman acciones
Generados por higher order components

--------------------------------------------------------------------------------------------------------

Portales

Portales es la manera en la que podemos renderizar componentes fuera del contenedor principal de la aplicación.

<divid="App"></div>
El caso de uso mas común son las ventanas modal.

Para crear un portal, se debe importar el metodo createPortal de react-dom:

import { createPortal} from'react-dom';
El metodo createPortal() recibe dos parametros, al igual que con render es Lo que se va a renderizar y donde se va a renderizar:

classModalContainerextendsComponent{
  render() {
    return (
      createPortal(<Component />, document.getElementById('component-container'))
    )
  }
}

--------------------------------------------------------------------------------------------------------

Manejo de errores

El metodo componentDidCatch pide dos parámetros al momento de ejecutarse:

El Error
Información acerca de ese error
componentDidCatch(error, info) {

}

Si tenemos algún servicio como Sentry, hay que enviarlo para que ese error sea monitorizado y luego con el team de desarrollo este sea solucionado.

Ya que es posible que si hay algún error recibiendo los datos es probable que en lugar de cambiar algún componente lo que se deba cambiar es la API. De esa manera se puede saber por donde va el arreglo, si por Backend o por Frontend.